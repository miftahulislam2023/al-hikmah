generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Base User model
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  phone         String?   @unique
  password      String?
  name          String?
  image         String?
  role          Role      @default(STUDENT)
  emailVerified DateTime?
  phoneVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  student  Student?
  teacher  Teacher?
  admin    Admin?
  accounts Account[]
  sessions Session[]
}

// Student-specific fields
model Student {
  id                 String    @id @default(cuid())
  userId             String    @unique
  sscBatch           Int?
  address            String?
  dob                DateTime?
  gender             Gender?
  currentInstitute   String?
  currentClass       Class?
  roll               String?
  guardianName       String?
  guardianPhone      String?
  guardianOccupation String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollments     Enrollment[]
  lectureProgress LectureProgress[]
  quizAttempts    QuizAttempt[]
}

// Teacher-specific fields
model Teacher {
  id               String    @id @default(cuid())
  userId           String    @unique
  address          String?
  dob              DateTime?
  gender           Gender?
  currentInstitute String?
  specialization   String?
  experience       Int? // years of experience
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courses Course[] @relation("CourseTeachers")
}

// Admin-specific fields
model Admin {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user                    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollmentVerifications Enrollment[] @relation("VerifiedBy")
}

// Course model
model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  semester    String?
  price       Float    @default(0) // 0 for free courses
  posterUrl   String? // for course poster image
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  teachers    Teacher[]    @relation("CourseTeachers")
  lectures    Lecture[]
  enrollments Enrollment[]
  quizzes     Quiz[]
}

// Lecture model
model Lecture {
  id          String   @id @default(cuid())
  title       String
  description String?
  videoUrl    String? // YouTube or other video links
  documentUrl String? // Document/PDF links
  order       Int      @default(0) // for lecture ordering
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courseId    String

  // Relations
  course   Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress LectureProgress[]
}

// Student enrollment and payment tracking
model Enrollment {
  id         String   @id @default(cuid())
  studentId  String
  courseId   String
  enrolledAt DateTime @default(now())

  // Payment fields
  hasPaid       Boolean        @default(false)
  paymentAmount Float?
  transactionId String? // bKash/Nagad/Upay transaction ID
  paymentMethod PaymentMethod?
  paymentStatus PaymentStatus  @default(PENDING)
  verifiedAt    DateTime?
  verifiedById  String? // Admin who verified

  // Relations
  student    Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course     Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  verifiedBy Admin?  @relation("VerifiedBy", fields: [verifiedById], references: [id])

  @@unique([studentId, courseId])
}

// Track lecture completion
model LectureProgress {
  id          String   @id @default(cuid())
  studentId   String
  lectureId   String
  completedAt DateTime @default(now())

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  lecture Lecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  @@unique([studentId, lectureId])
}

// Quiz model
model Quiz {
  id          String   @id @default(cuid())
  title       String
  description String?
  courseId    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course    Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions Question[]
  attempts  QuizAttempt[]
}

// Quiz questions (MCQ)
model Question {
  id            String   @id @default(cuid())
  question      String
  optionA       String
  optionB       String
  optionC       String
  optionD       String
  correctAnswer String // A, B, C, or D
  quizId        String
  order         Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

// Quiz attempts and scores
model QuizAttempt {
  id             String   @id @default(cuid())
  studentId      String
  quizId         String
  score          Int // out of total questions
  totalQuestions Int
  answers        Json // Store student's answers
  attemptedAt    DateTime @default(now())

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  quiz    Quiz    @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Enums
enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum Class {
  ONE
  TWO
  THREE
  FOUR
  FIVE
  SIX
  SEVEN
  EIGHT
  NINE
  TEN
  ELEVEN
  TWELVE
  OTHER
}

enum PaymentMethod {
  BKASH
  NAGAD
  UPAY
  ROCKET
}

enum PaymentStatus {
  PENDING
  VERIFIED
  REJECTED
}
